pm list instrumentation
am instrument -w -r com.via.instrument.test/android.support.test.runner.AndroidJUnitRunner      
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
开始收集目标进程运行过程中的函数调用关系
其中PROCESS是所要收集的进程，直接用进程号即可， FILE是收集后trace所在的文件，一般直接放在/sdcard 目录下，所以直接用/sdcard/文件名 即可。
命令样例：
am profile start 17495 /mnt/sdcard/profile.txt
am dumpheap com.via.qa /mnt/sdcard/profile.hprof
///////////////////////////////////////////////////////////////////////////////////////////////////////
am stack list  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1、trim是什么？

        一条ATA指令，由操作系统发送给SSD主控制器，告诉它哪些数据占有的地址是“无效的”。 其实就是操作系统将一部分的控制权交给了SSD主控制器，让操作系统与SSD主控制器有一个互动。因为闪存需要先擦除才能再次写入数据，要得到空闲的闪存空间，SSD必须复制所有“有效”页到新的“空白页”里，并且擦除旧块，即垃圾回收；避免了在操作系统要重新写入数据时， SSD才会知道哪些地址是无效的情况。这样就可以在适当的时机做最好的优化。 简而言之，这是一种能够让闪存长期工作后，也能维持高速度的技术。不少人长期使用安卓机后表示，安卓怎么就越用越卡，无论怎么刷系统清数据也没法回到刚买时的流畅度。这往往是由于长期使用后，闪存的垃圾回收效率大大降低，使得安卓机的I/O性能大跌造成的。安卓4.3支持Trim技术，能够大幅提升闪存垃圾回收效率，让闪存始终保持接近原始状态的高速度。  这样做既提高了“硬盘速度”， 同时也延长了SSD的使用寿命，垃圾回收！！！

2、调用trim整理NAND上碎片的两种方法
    1、挂载ext4分区时加上discard选项， 可以在fstab.qcom文件中查看相关定义。
        eg：fstab.qcom中有如下定义，
            /dev/block/bootdevice/by-name/system         /system      ext4    ro,barrier=1,discard                                wait
        其中的discard选项表示使用trim整理功能。
    2、使用fstrim命令，当设备各传感器满足一定条件下就会从MountService.java中调用语句 — — > mConnector.execute("fstrim", "dotrim")启动trim整理功能，该语句将直接调用到vold层执行fstrim 命令。
3、fstrim命令实现流程简单介绍

   3.1 Java Framework层
        Framework层启动fstrim整理磁盘anroid L 和android4.4版本有所不同，将分别介绍两种方案。
        
   3.1.1 android 4.4   

        可以分为两种方式，一是系统自我检测触发功能，二是手动输入命令直接触发功能。手动触发功能是USB连上手机后输入adb shell am idle-maintenance直接启动，frame
//////////////////////////////////////////////////////////////////////////////////
am screen-compat on com.via.qa
am screen-compad off com.via.qa

//////////////////////////////////////
sagit:/ $ bu backup -noapk                                                     
sagit:/ $ bu backup -obb                                                       
sagit:/ $ bu backup -noobb                                                     
sagit:/ $ bu backup -shared                                                    
sagit:/ $ bu backup -noshared                                                  
sagit:/ $ bu backup -system                                                    
sagit:/ $ bu backup -nosystem                                                  
sagit:/ $ bu backup -all        
////////////////////////////////
如adb shell content insert --uri content://icc/adn --bind _id:i:1 --bind index:i:2 --bind name:s:zhangsan --bind number:s:123456789
代表往sim卡联系人中插入 一条记录，其中 id 是1，index 是2，name 是zhangsan，number是123456789，在这个当中，--bind后跟的就是相关数据，i代表int，s代表string，b代表bollean，f代表float，l代表long。
又如adb shell content query --uri content://icc/adn --projection _id:name --where "name='zhangsan'" --sort "name ASC"
代表查询sim卡联系人中name是zhangsan的联系人的id和name 并按照name的升序排列结果。
//////////////////////////////////////////////




















